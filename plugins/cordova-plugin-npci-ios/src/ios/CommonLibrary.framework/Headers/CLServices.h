/**
 * NPCI
 * Copyright (C) 2017 NPCI
 *
 * This program is developed for usage by NPCI only.
 * Any distribution of this code
 * in any format is strictly prohibited without the express
 * permission of NPCI.
 *
 */

#import <Foundation/Foundation.h>
#import <UIKit/UIKit.h>
#define ERRORDOMAIN @"CommonLibrary"

@interface CLServices : NSObject <NSXMLParserDelegate>
{
    
}

/* Returns true if challange is a valid string .
 
 
 @brief Get the challange (string pointer) with deviceId, appId , type - type may be "Initial" or "Rotate"
 @author RSSoftware
 @copyright Copyright text RSSoftware
 @note getChallengeForDeviceId is called in two modes "Initial" or "Rotate"
 @remarks getChallengeForDeviceId is a class function calling function as :        BOOL success = [CLServices getChallengeForDeviceId:device_id appId:App_Id type:@"Initial" challenge:&challange error:&error];
 
 @since library version 2.0.0
 @todo Initially when the app is launched then the function is called in "Initial" mode then challenge is found that is valid for 30days , after 30 days it is called in "Rotate" mode
 @version 2.0.0
 @result pointer to string - challenge
 @return BOOL
 
 
 @code
 
 BOOL success = [CLServices getChallengeForDeviceId:device_id appId:App_Id type:@"Initial" challenge:&challange error:&error]; ////initial
 
 NSTimeInterval interval = [previous_date timeIntervalSinceNow];
 
 if (interval>2592000) ///interval for 30 days
 {
 BOOL success = [CLServices getChallengeForDeviceId:device_id appId:App_Id type:@"Rotate" challenge:&challange error:&error];
 }
 
 
 
 @param deviceId,appId,type
 */


+(BOOL)getChallengeForDeviceId :(NSString*)device_Id appId:(NSString*)app_Id type: (NSString*)type challenge:(NSString**)challenge error:(NSError**)error;


/** Returns true if hmac is valid with respect of appid, mobile, deviceid .
 
 
 @brief validation of hmac (generated with appId,mobile number,deviceid hash) with the actual parameters
 @author RSSoftware
 @copyright Copyright text RSSoftware
 @note registerAppWithHmac is called with hmac generated by app with deviceId, appId and mobile number
 @remarks registerAppWithHmac is a class function calling function as :         BOOL success_register=  [CLServices registerAppWithHmac:hmac appID:App_Id mobile:@"919002050725" deviceID:device_id error:&register_error];
 
 @since library version 2.0.0
 @todo It is prefferable to call registerAppWithHmac in applicationDidBecomeActive of appdelegate.
 @version 2.0.0
 
 @result BOOL - hmac is valid against provided appid, mobile, deviceId.
 @return BOOL
 
 
 @code  BOOL success_register=  [CLServices registerAppWithHmac:hmac appID:App_Id mobile:@"919002050725" deviceID:device_id error:&register_error];
 
 @param hmac,appId,mobile,deviceId
 
 */

+(BOOL)registerAppWithHmac : (NSString*)hmac appID: (NSString*)app_id mobile: (NSString*)mobile deviceID: (NSString*)device_id error:(NSError**)error;

/** getCredentialsPresentedFrom is called during transaction
 
 
 @brief this function is used to create common library input fields for many consequences such as or balance enquiry,for normal pay transaction , for setting new mpin or mobile number verification
 
 @author RSSoftware
 @copyright Copyright text RSSoftware
 @remarks getCredentialsPresentedFrom is a class function calling function as :          [CLServices getCredentialsPresentedFrom:self controls:controls keyCode:@"NPCI" keyXMLPayload:xml_str configuration:configuration salt:salt trust:trust payInfo:payInfo language:@"En_Us" completionHandler:^(BOOL success, NSError *error, NSDictionary *cred)
 {
 NSLog(@"%d",success);
 NSLog(@"cred= %@",cred);
 
 
 }];
 @since library version 2.0.0
 @todo the function is called during any type of 3rd party transaction
 @version 2.0.0
 @result if successful then credentials are returned as a dictionary
@return no returns
 
 
 @code [CLServices getCredentialsPresentedFrom:<> controls:controls keyCode:@"NPCI" keyXMLPayload:xml_str configuration:configuration salt:salt trust:trust payInfo:payInfo language:@"en_Us" completionHandler:^(BOOL success, NSError *error, NSDictionary *cred)
 {
 NSLog(@"%d",success);
 NSLog(@"cred= %@",cred);
 
 
 }];
 
 @params
 1. viewcontroller object on which commonlibrary is presented
 2. controls dictionary
 3. KeyCode
 4. xml string
 5. configurarion
 6. salt
 7. trust
 8. payInfo
 9. languge - only english is supported
 
 
 */

+(void)getCredentialsPresentedFrom:(UIViewController*)viewController controls:(NSDictionary*)controls keyCode:(NSString*)keyCode keyXMLPayload:(NSString*)keyXMLPayload configuration:(NSDictionary*)configuration salt:(NSDictionary*)salt trust:(NSString*)trust payInfo:(NSArray*)payInfo language:(NSString*)language completionHandler:(void(^)(int ,NSError *,NSDictionary* ))completionHandler;


+(BOOL)getChallengeForDeviceId :(NSString*)device_Id appId:(NSString*)app_Id type: (NSString*)type challenge:(NSString**)challenge appGroup:(NSString*)appGroup error:(NSError**)error;

+(BOOL)registerAppWithHmac : (NSString*)hmac appID: (NSString*)app_id mobile: (NSString*)mobile deviceID: (NSString*)device_id appGroup:(NSString*)appGroup error:(NSError**)error;

+(void)getCredentialsPresentedFrom:(UIViewController*)viewController controls:(NSDictionary*)controls keyCode:(NSString*)keyCode keyXMLPayload:(NSString*)keyXMLPayload configuration:(NSDictionary*)configuration salt:(NSDictionary*)salt trust:(NSString*)trust payInfo:(NSArray*)payInfo language:(NSString*)language appGroup:(NSString*)appGroup completionHandler:(void(^)(int ,NSError *,NSDictionary*))completionHandler;

@end
